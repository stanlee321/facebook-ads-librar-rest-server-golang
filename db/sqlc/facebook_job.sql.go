// Code generated by sqlc. DO NOT EDIT.
// source: facebook_job.sql

package db

import (
	"context"
	"database/sql"
)

const createFacebookJob = `-- name: CreateFacebookJob :one
INSERT INTO "FacebookJob" (
  search_terms,
  access_token,
  page_total,
  search_total,
  ad_active_status,
  ad_delivery_date_max,
  ad_delivery_date_min,
  ad_reached_countries
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, search_terms, access_token, page_total, search_total, ad_active_status, ad_delivery_date_max, ad_delivery_date_min, ad_reached_countries, created_at
`

type CreateFacebookJobParams struct {
	SearchTerms        sql.NullString `json:"search_terms"`
	AccessToken        sql.NullString `json:"access_token"`
	PageTotal          sql.NullInt64  `json:"page_total"`
	SearchTotal        sql.NullInt64  `json:"search_total"`
	AdActiveStatus     sql.NullString `json:"ad_active_status"`
	AdDeliveryDateMax  sql.NullString `json:"ad_delivery_date_max"`
	AdDeliveryDateMin  sql.NullString `json:"ad_delivery_date_min"`
	AdReachedCountries sql.NullString `json:"ad_reached_countries"`
}

func (q *Queries) CreateFacebookJob(ctx context.Context, arg CreateFacebookJobParams) (FacebookJob, error) {
	row := q.db.QueryRowContext(ctx, createFacebookJob,
		arg.SearchTerms,
		arg.AccessToken,
		arg.PageTotal,
		arg.SearchTotal,
		arg.AdActiveStatus,
		arg.AdDeliveryDateMax,
		arg.AdDeliveryDateMin,
		arg.AdReachedCountries,
	)
	var i FacebookJob
	err := row.Scan(
		&i.ID,
		&i.SearchTerms,
		&i.AccessToken,
		&i.PageTotal,
		&i.SearchTotal,
		&i.AdActiveStatus,
		&i.AdDeliveryDateMax,
		&i.AdDeliveryDateMin,
		&i.AdReachedCountries,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFaceookJob = `-- name: DeleteFaceookJob :exec
DELETE FROM "FacebookJob"
WHERE id = $1
`

func (q *Queries) DeleteFaceookJob(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFaceookJob, id)
	return err
}

const getFacebookJob = `-- name: GetFacebookJob :one
SELECT id, search_terms, access_token, page_total, search_total, ad_active_status, ad_delivery_date_max, ad_delivery_date_min, ad_reached_countries, created_at FROM "FacebookJob"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFacebookJob(ctx context.Context, id int64) (FacebookJob, error) {
	row := q.db.QueryRowContext(ctx, getFacebookJob, id)
	var i FacebookJob
	err := row.Scan(
		&i.ID,
		&i.SearchTerms,
		&i.AccessToken,
		&i.PageTotal,
		&i.SearchTotal,
		&i.AdActiveStatus,
		&i.AdDeliveryDateMax,
		&i.AdDeliveryDateMin,
		&i.AdReachedCountries,
		&i.CreatedAt,
	)
	return i, err
}

const getPastFacebookJob = `-- name: GetPastFacebookJob :one
SELECT id, search_terms, access_token, page_total, search_total, ad_active_status, ad_delivery_date_max, ad_delivery_date_min, ad_reached_countries, created_at FROM "FacebookJob"
WHERE search_terms = $1 AND
  page_total = $2 AND
  search_total = $3 AND
  ad_active_status = $4 AND
  ad_delivery_date_max = $5 AND
  ad_delivery_date_min = $6 AND
  ad_reached_countries = $7
LIMIT 1
`

type GetPastFacebookJobParams struct {
	SearchTerms        sql.NullString `json:"search_terms"`
	PageTotal          sql.NullInt64  `json:"page_total"`
	SearchTotal        sql.NullInt64  `json:"search_total"`
	AdActiveStatus     sql.NullString `json:"ad_active_status"`
	AdDeliveryDateMax  sql.NullString `json:"ad_delivery_date_max"`
	AdDeliveryDateMin  sql.NullString `json:"ad_delivery_date_min"`
	AdReachedCountries sql.NullString `json:"ad_reached_countries"`
}

func (q *Queries) GetPastFacebookJob(ctx context.Context, arg GetPastFacebookJobParams) (FacebookJob, error) {
	row := q.db.QueryRowContext(ctx, getPastFacebookJob,
		arg.SearchTerms,
		arg.PageTotal,
		arg.SearchTotal,
		arg.AdActiveStatus,
		arg.AdDeliveryDateMax,
		arg.AdDeliveryDateMin,
		arg.AdReachedCountries,
	)
	var i FacebookJob
	err := row.Scan(
		&i.ID,
		&i.SearchTerms,
		&i.AccessToken,
		&i.PageTotal,
		&i.SearchTotal,
		&i.AdActiveStatus,
		&i.AdDeliveryDateMax,
		&i.AdDeliveryDateMin,
		&i.AdReachedCountries,
		&i.CreatedAt,
	)
	return i, err
}

const listFacebookJobs = `-- name: ListFacebookJobs :many
SELECT id, search_terms, access_token, page_total, search_total, ad_active_status, ad_delivery_date_max, ad_delivery_date_min, ad_reached_countries, created_at FROM "FacebookJob"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFacebookJobsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFacebookJobs(ctx context.Context, arg ListFacebookJobsParams) ([]FacebookJob, error) {
	rows, err := q.db.QueryContext(ctx, listFacebookJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacebookJob{}
	for rows.Next() {
		var i FacebookJob
		if err := rows.Scan(
			&i.ID,
			&i.SearchTerms,
			&i.AccessToken,
			&i.PageTotal,
			&i.SearchTotal,
			&i.AdActiveStatus,
			&i.AdDeliveryDateMax,
			&i.AdDeliveryDateMin,
			&i.AdReachedCountries,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFacebookJobsBySearch = `-- name: ListFacebookJobsBySearch :many
SELECT id, search_terms, access_token, page_total, search_total, ad_active_status, ad_delivery_date_max, ad_delivery_date_min, ad_reached_countries, created_at FROM "FacebookJob"
WHERE search_terms = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListFacebookJobsBySearchParams struct {
	SearchTerms sql.NullString `json:"search_terms"`
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
}

func (q *Queries) ListFacebookJobsBySearch(ctx context.Context, arg ListFacebookJobsBySearchParams) ([]FacebookJob, error) {
	rows, err := q.db.QueryContext(ctx, listFacebookJobsBySearch, arg.SearchTerms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacebookJob{}
	for rows.Next() {
		var i FacebookJob
		if err := rows.Scan(
			&i.ID,
			&i.SearchTerms,
			&i.AccessToken,
			&i.PageTotal,
			&i.SearchTotal,
			&i.AdActiveStatus,
			&i.AdDeliveryDateMax,
			&i.AdDeliveryDateMin,
			&i.AdReachedCountries,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFacebookJobsByToken = `-- name: ListFacebookJobsByToken :many
SELECT id, search_terms, access_token, page_total, search_total, ad_active_status, ad_delivery_date_max, ad_delivery_date_min, ad_reached_countries, created_at FROM "FacebookJob"
WHERE access_token = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListFacebookJobsByTokenParams struct {
	AccessToken sql.NullString `json:"access_token"`
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
}

func (q *Queries) ListFacebookJobsByToken(ctx context.Context, arg ListFacebookJobsByTokenParams) ([]FacebookJob, error) {
	rows, err := q.db.QueryContext(ctx, listFacebookJobsByToken, arg.AccessToken, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacebookJob{}
	for rows.Next() {
		var i FacebookJob
		if err := rows.Scan(
			&i.ID,
			&i.SearchTerms,
			&i.AccessToken,
			&i.PageTotal,
			&i.SearchTotal,
			&i.AdActiveStatus,
			&i.AdDeliveryDateMax,
			&i.AdDeliveryDateMin,
			&i.AdReachedCountries,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// source: facebook_ad_region.sql

package db

import (
	"context"
	"database/sql"
)

const createFacebookRegion = `-- name: CreateFacebookRegion :one
INSERT INTO "FacebookRegions" (
  ad_id,
  page_id,
  region,
  percentage,
  ad_delivery_start_time
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, ad_id, page_id, region, percentage, ad_delivery_start_time, created_at
`

type CreateFacebookRegionParams struct {
	AdID                sql.NullInt64  `json:"ad_id"`
	PageID              sql.NullInt64  `json:"page_id"`
	Region              sql.NullString `json:"region"`
	Percentage          sql.NullString `json:"percentage"`
	AdDeliveryStartTime sql.NullString `json:"ad_delivery_start_time"`
}

func (q *Queries) CreateFacebookRegion(ctx context.Context, arg CreateFacebookRegionParams) (FacebookRegion, error) {
	row := q.db.QueryRowContext(ctx, createFacebookRegion,
		arg.AdID,
		arg.PageID,
		arg.Region,
		arg.Percentage,
		arg.AdDeliveryStartTime,
	)
	var i FacebookRegion
	err := row.Scan(
		&i.ID,
		&i.AdID,
		&i.PageID,
		&i.Region,
		&i.Percentage,
		&i.AdDeliveryStartTime,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFaceookRegion = `-- name: DeleteFaceookRegion :exec
DELETE FROM "FacebookDemos"
WHERE id = $1
`

func (q *Queries) DeleteFaceookRegion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFaceookRegion, id)
	return err
}

const getFacebookRegion = `-- name: GetFacebookRegion :one
SELECT id, ad_id, page_id, region, percentage, ad_delivery_start_time, created_at FROM "FacebookRegions"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFacebookRegion(ctx context.Context, id int64) (FacebookRegion, error) {
	row := q.db.QueryRowContext(ctx, getFacebookRegion, id)
	var i FacebookRegion
	err := row.Scan(
		&i.ID,
		&i.AdID,
		&i.PageID,
		&i.Region,
		&i.Percentage,
		&i.AdDeliveryStartTime,
		&i.CreatedAt,
	)
	return i, err
}

const listFacebookRegions = `-- name: ListFacebookRegions :many
SELECT id, ad_id, page_id, region, percentage, ad_delivery_start_time, created_at FROM "FacebookRegions"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFacebookRegionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFacebookRegions(ctx context.Context, arg ListFacebookRegionsParams) ([]FacebookRegion, error) {
	rows, err := q.db.QueryContext(ctx, listFacebookRegions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacebookRegion{}
	for rows.Next() {
		var i FacebookRegion
		if err := rows.Scan(
			&i.ID,
			&i.AdID,
			&i.PageID,
			&i.Region,
			&i.Percentage,
			&i.AdDeliveryStartTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFacebookRegionsByAdID = `-- name: ListFacebookRegionsByAdID :many
SELECT id, ad_id, page_id, region, percentage, ad_delivery_start_time, created_at FROM "FacebookRegions"
WHERE ad_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListFacebookRegionsByAdIDParams struct {
	AdID   sql.NullInt64 `json:"ad_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListFacebookRegionsByAdID(ctx context.Context, arg ListFacebookRegionsByAdIDParams) ([]FacebookRegion, error) {
	rows, err := q.db.QueryContext(ctx, listFacebookRegionsByAdID, arg.AdID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacebookRegion{}
	for rows.Next() {
		var i FacebookRegion
		if err := rows.Scan(
			&i.ID,
			&i.AdID,
			&i.PageID,
			&i.Region,
			&i.Percentage,
			&i.AdDeliveryStartTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFacebookRegionsByPageID = `-- name: ListFacebookRegionsByPageID :many
SELECT id, ad_id, page_id, region, percentage, ad_delivery_start_time, created_at FROM "FacebookRegions"
WHERE page_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListFacebookRegionsByPageIDParams struct {
	PageID sql.NullInt64 `json:"page_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListFacebookRegionsByPageID(ctx context.Context, arg ListFacebookRegionsByPageIDParams) ([]FacebookRegion, error) {
	rows, err := q.db.QueryContext(ctx, listFacebookRegionsByPageID, arg.PageID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacebookRegion{}
	for rows.Next() {
		var i FacebookRegion
		if err := rows.Scan(
			&i.ID,
			&i.AdID,
			&i.PageID,
			&i.Region,
			&i.Percentage,
			&i.AdDeliveryStartTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

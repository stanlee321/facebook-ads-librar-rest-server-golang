// Code generated by sqlc. DO NOT EDIT.
// source: facebook_job_to_demo.sql

package db

import (
	"context"
	"database/sql"
)

const createJobToFacebookDemo = `-- name: CreateJobToFacebookDemo :one
INSERT INTO "JobToFacebookDemo" (
  job_id,
  ad_demo_id
) VALUES (
  $1, $2
)
RETURNING id, job_id, ad_demo_id, created_at
`

type CreateJobToFacebookDemoParams struct {
	JobID    sql.NullInt64 `json:"job_id"`
	AdDemoID sql.NullInt64 `json:"ad_demo_id"`
}

func (q *Queries) CreateJobToFacebookDemo(ctx context.Context, arg CreateJobToFacebookDemoParams) (JobToFacebookDemo, error) {
	row := q.db.QueryRowContext(ctx, createJobToFacebookDemo, arg.JobID, arg.AdDemoID)
	var i JobToFacebookDemo
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.AdDemoID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJobToFacebookDemo = `-- name: DeleteJobToFacebookDemo :exec
DELETE FROM "JobToFacebookDemo"
WHERE id = $1
`

func (q *Queries) DeleteJobToFacebookDemo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteJobToFacebookDemo, id)
	return err
}

const getJobToFacebookDemo = `-- name: GetJobToFacebookDemo :one
SELECT id, job_id, ad_demo_id, created_at FROM "JobToFacebookDemo"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobToFacebookDemo(ctx context.Context, id int64) (JobToFacebookDemo, error) {
	row := q.db.QueryRowContext(ctx, getJobToFacebookDemo, id)
	var i JobToFacebookDemo
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.AdDemoID,
		&i.CreatedAt,
	)
	return i, err
}

const listJobToFacebookDemo = `-- name: ListJobToFacebookDemo :many
SELECT id, job_id, ad_demo_id, created_at FROM "JobToFacebookDemo"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListJobToFacebookDemoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobToFacebookDemo(ctx context.Context, arg ListJobToFacebookDemoParams) ([]JobToFacebookDemo, error) {
	rows, err := q.db.QueryContext(ctx, listJobToFacebookDemo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobToFacebookDemo{}
	for rows.Next() {
		var i JobToFacebookDemo
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.AdDemoID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobToFacebookDemoByJobID = `-- name: ListJobToFacebookDemoByJobID :many
SELECT id, job_id, ad_demo_id, created_at FROM "JobToFacebookDemo"
WHERE job_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListJobToFacebookDemoByJobIDParams struct {
	JobID  sql.NullInt64 `json:"job_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListJobToFacebookDemoByJobID(ctx context.Context, arg ListJobToFacebookDemoByJobIDParams) ([]JobToFacebookDemo, error) {
	rows, err := q.db.QueryContext(ctx, listJobToFacebookDemoByJobID, arg.JobID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobToFacebookDemo{}
	for rows.Next() {
		var i JobToFacebookDemo
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.AdDemoID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

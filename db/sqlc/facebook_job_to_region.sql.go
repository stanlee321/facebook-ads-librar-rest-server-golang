// Code generated by sqlc. DO NOT EDIT.
// source: facebook_job_to_region.sql

package db

import (
	"context"
	"database/sql"
)

const createJobToFacebookRegion = `-- name: CreateJobToFacebookRegion :one
INSERT INTO "JobToFacebookRe" (
  job_id,
  ad_region_id
) VALUES (
  $1, $2
)
RETURNING id, job_id, ad_region_id, created_at
`

type CreateJobToFacebookRegionParams struct {
	JobID      sql.NullInt64 `json:"job_id"`
	AdRegionID sql.NullInt64 `json:"ad_region_id"`
}

func (q *Queries) CreateJobToFacebookRegion(ctx context.Context, arg CreateJobToFacebookRegionParams) (JobToFacebookRe, error) {
	row := q.db.QueryRowContext(ctx, createJobToFacebookRegion, arg.JobID, arg.AdRegionID)
	var i JobToFacebookRe
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.AdRegionID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJobToFacebookRegion = `-- name: DeleteJobToFacebookRegion :exec
DELETE FROM "JobToFacebookRe"
WHERE id = $1
`

func (q *Queries) DeleteJobToFacebookRegion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteJobToFacebookRegion, id)
	return err
}

const getJobToFacebookRegion = `-- name: GetJobToFacebookRegion :one
SELECT id, job_id, ad_region_id, created_at FROM "JobToFacebookRe"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobToFacebookRegion(ctx context.Context, id int64) (JobToFacebookRe, error) {
	row := q.db.QueryRowContext(ctx, getJobToFacebookRegion, id)
	var i JobToFacebookRe
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.AdRegionID,
		&i.CreatedAt,
	)
	return i, err
}

const listJobToFacebookRegion = `-- name: ListJobToFacebookRegion :many
SELECT id, job_id, ad_region_id, created_at FROM "JobToFacebookRe"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListJobToFacebookRegionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobToFacebookRegion(ctx context.Context, arg ListJobToFacebookRegionParams) ([]JobToFacebookRe, error) {
	rows, err := q.db.QueryContext(ctx, listJobToFacebookRegion, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobToFacebookRe{}
	for rows.Next() {
		var i JobToFacebookRe
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.AdRegionID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobToFacebookRegionByJobID = `-- name: ListJobToFacebookRegionByJobID :many
SELECT id, job_id, ad_region_id, created_at FROM "JobToFacebookRe"
WHERE job_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListJobToFacebookRegionByJobIDParams struct {
	JobID  sql.NullInt64 `json:"job_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListJobToFacebookRegionByJobID(ctx context.Context, arg ListJobToFacebookRegionByJobIDParams) ([]JobToFacebookRe, error) {
	rows, err := q.db.QueryContext(ctx, listJobToFacebookRegionByJobID, arg.JobID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobToFacebookRe{}
	for rows.Next() {
		var i JobToFacebookRe
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.AdRegionID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
